<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Upsilon.Common.Library</name>
    </assembly>
    <members>
        <member name="T:Upsilon.Common.Library.YArgumentParser">
            <summary>
            The Upsilon Ecosystem argument parsing engine.
            <seealso cref="T:Upsilon.Common.Library.YArgument"/>
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgumentParser.Arguments">
            <summary>
            Get the list of <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> parsed by the engine.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgumentParser.Args">
            <summary>
            Get the raw arguments given to the engine.
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YArgumentParser.ArgModifiers">
            <summary>
            Get the list of argument modifiers :
            <list type="bullet">
            <item><description>the dash '-'</description></item>
            <item><description>the slash '/'</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.#ctor(System.String[])">
            <summary>
            Create a new argument parser engine from an argument list.
            <example>
            <code>
               YArgumentParser argumentParser = new YArgumentParser(new string[]
                   { 
                       "First value of the main argument",
                       "Second value of the main argument",
                       "-s",
                       "source",
                       "/d",
                       "destination",
                       "-readonly"
                   });
            </code>
            In results, <c>argumentParser</c> will have 4 arguments : 
            <list type="bullet">
            <item><description>the main argument which has 2 values</description></item>
            <item><description><c>s</c> argument which has <c>source</c> as value</description></item>
            <item><description><c>d</c> argument which has <c>destination</c> as value</description></item>
            <item><description><c>readonly</c> argument which is set as boolean</description></item>
            </list>
            </example>
            </summary>
            <param name="args">The arguments list</param>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.GetArgument(System.String)">
            <summary>
            Get a <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> from the <paramref name="argName"/> or <c>null</c> if the given param is not found.
            <example>
            <code>
               YArgumentParser argumentParser = new YArgumentParser(new string[]
                   { 
                       "First value of the main argument",
                       "Second value of the main argument",
                       "-s",
                       "source",
                       "/d",
                       "destination",
                       "-readonly"
                   });
               YArgument argument = argumentParser.GetArgument("s");
               YArgument mainArgument = argumentParser.GetArgument(string.Empty);
               YArgument nullArgument = argumentParser.GetArgument("m");
            </code>
            In results :
            <list type="bullet">
                <item><description><c>argument.Values</c> will be <c>{ "source" }</c></description></item>
                <item><description><c>mainArgument.Values</c> will be <c>{ "First value of the main argument", "Second value of the main argument"}</c></description></item>
                <item><description><c>nullArgument</c> will be <c>null</c></description></item>
            </list>
            </example>
            </summary>
            <remarks>Giving string.Empty to the <paramref name="argName"/> param will return the main <c>YArguments</c></remarks>
            <param name="argName"></param>
            <returns>Returns the <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> or <c>null</c></returns>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.HasArgument(System.String)">
            <summary>
            Check if the <paramref name="argName"/> is set.
            <example>
            <code>
               YArgumentParser argumentParser = new YArgumentParser(new string[]
                   { 
                       "First value of the main argument",
                       "Second value of the main argument",
                       "-s",
                       "source",
                       "/d",
                       "destination",
                       "-readonly"
                   });
            </code>
            In results :
            <list type="bullet">
                <item><description><c>argumentParser.HasArgument(string.Empty)</c> will return <c>true</c> because it has main argument</description></item>
                <item><description><c>argumentParser.HasArgument("s")</c> will return <c>true</c></description></item>
                <item><description><c>argumentParser.HasArgument("readonly")</c> will return <c>true</c></description></item>
                <item><description><c>argumentParser.HasArgument("m")</c> will return <c>false</c></description></item>
            </list>
            </example>
            </summary>
            <param name="argName"></param>
            <returns>Returns <c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.ArgumentIsSet(System.String)">
            <summary>
            Check if the <paramref name="argName"/> is set as a boolean.
            <example>
            <code>
               YArgumentParser argumentParser = new YArgumentParser(new string[]
                   { 
                       "First value of the main argument",
                       "Second value of the main argument",
                       "-s",
                       "source",
                       "/d",
                       "destination",
                       "-readonly"
                   });
            </code>
            In results :
            <list type="bullet">
                <item><description><c>argumentParser.ArgumentIsSet(string.Empty)</c> will return <c>false</c> because the main argument cannot be set as boolean</description></item>
                <item><description><c>argumentParser.ArgumentIsSet("s")</c> will return <c>false</c> because this argument is not set as boolean</description></item>
                <item><description><c>argumentParser.ArgumentIsSet("readonly")</c> will return <c>true</c></description></item>
                <item><description><c>argumentParser.ArgumentIsSet("override")</c> will return <c>false</c></description></item>
            </list>
            </example>
            </summary>
            <param name="argName"></param>
            <returns>Returns <c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.GetMainArgument">
            <summary>
            Get the main <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> or <c>null</c> if not found.
            </summary>
            <returns>Returns the <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> or <c>null</c></returns>
        </member>
        <member name="T:Upsilon.Common.Library.YArgument">
            <summary>
            This class represent an argument parsed by a <c><see cref="T:Upsilon.Common.Library.YArgumentParser"/></c>.
            <seealso cref="T:Upsilon.Common.Library.YArgumentParser"/>
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgument.Name">
            <summary>
            The name of the argument without its modifier.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgument.Values">
            <summary>
            The values of the argument.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgument.IsBoolean">
            <summary>
            Check if the argument is set as a boolean.
            </summary>
        </member>
        <member name="T:Upsilon.Common.Library.YBase">
            <summary>
            Enumerate numeric bases
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.None">
            <summary>
            Unknown base
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.Binary">
            <summary>
            Binary base (2)
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.Octal">
            <summary>
            Octal base (8)
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.Decimal">
            <summary>
            Decimal base (10)
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.Hexadecimal">
            <summary>
            Hexadecimal base (16)
            </summary>
        </member>
        <member name="T:Upsilon.Common.Library.YBaseExtensions">
            <summary>
            Extension method class for <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YBaseExtensions.GetBaseNumber(Upsilon.Common.Library.YBase)">
            <summary>
            Returns the base number of the given <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> to return the number.</param>
            <returns>
            The base number : 
            <list type="bullet">
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.None</c> : 0</description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Binary</c> : 2</description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Octal</c> : 8</description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Decimal</c> : 10</description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Hexadecimal</c> : 16</description></item>
            </list>
            </returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBaseExtensions.GetAlphabet(Upsilon.Common.Library.YBase)">
            <summary>
            Returns the alphabet of the given <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> to return the alphabet.</param>
            <returns>
            The alphabet : 
            <list type="bullet">
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.None</c> : <c>string.Empty</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Binary</c> : <c>"01"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Octal</c> : <c>"01234567"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Decimal</c> : <c>"0123456789"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Hexadecimal</c> : <c>"0123456789ABCDEF"</c></description></item>
            </list>
            </returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBaseExtensions.GetPrefix(Upsilon.Common.Library.YBase)">
            <summary>
            Returns the prefix of the given <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> to return the prefix.</param>
            <returns>
            The prefix : 
            <list type="bullet">
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.None</c> : <c>string.Empty</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Binary</c> : <c>"0b"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Octal</c> : <c>"0o"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Decimal</c> : <c>"0d"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Hexadecimal</c> : <c>"0x"</c></description></item>
            </list>
            </returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBaseExtensions.GetDigitGroup(Upsilon.Common.Library.YBase)">
            <summary>
            Returns the digit group of the given <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> to return the digit group.</param>
            <returns>
            The digit group : 
            <list type="bullet">
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.None</c> : <c>0</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Binary</c> : <c>"8"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Octal</c> : <c>"2"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Decimal</c> : <c>"1"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Hexadecimal</c> : <c>"2"</c></description></item>
            </list>
            </returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBaseExtensions.GetBases">
            <summary>
            Returns all values of the <c><see cref="T:Upsilon.Common.Library.YBase"/></c> enum.
            </summary>
            <returns>All values of the <c><see cref="T:Upsilon.Common.Library.YBase"/></c> enum</returns>
        </member>
        <member name="T:Upsilon.Common.Library.YBigInteger">
            <summary>
            This class represent a big integer.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YBigInteger.ByteArray">
            <summary>
            The byte array which represent the <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.#ctor(System.Byte[])">
            <summary>
            Create a new <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> from the byte array <c><paramref name="byteArray"/></c>.
            </summary>
            <param name="byteArray">The byte array.</param>
        </member>
        <member name="F:Upsilon.Common.Library.YBigInteger.InternalBase">
            <summary>
            The internal base which is 0x100 or 256.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.#ctor(System.String)">
            <summary>
            Create a new <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> from the <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string number <c><paramref name="strValue"/></c>.
            </summary>
            <param name="strValue">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string number</param>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.ToString">
            <summary>
            Returns the <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> in <c><see cref="F:Upsilon.Common.Library.YBase.Decimal"/></c> string format.
            </summary>
            <returns>The <c><see cref="F:Upsilon.Common.Library.YBase.Decimal"/></c> string format.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.ToString(Upsilon.Common.Library.YBase)">
            <summary>
            Returns the <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> in the <c><paramref name="base"/></c> prefixed string format.
            </summary>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.</param>
            <returns>The <c><paramref name="base"/></c> prefixed string format.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.AddString(System.String,System.String)">
            <summary>
            Add two <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string.
            </summary>
            <remarks>The two <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string should be in the same base.</remarks>
            <exception cref="T:System.Exception">Occurs when one of the string are not valide or if the two strings are not in the same base.</exception>
            <param name="strValue1">The first <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string.</param>
            <param name="strValue2">The second <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string which is the sum of the two strings</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.MultiplyString(System.String,System.String)">
            <summary>
            Multiply two <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string.
            </summary>
            <remarks>The two <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string should be in the same base.</remarks>
            <exception cref="T:System.Exception">Occurs when one of the string are not valide or if the two strings are not in the same base.</exception>
            <param name="strValue1">The first <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string.</param>
            <param name="strValue2">The second <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string which is the product of the two strings.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.AddBytes(System.Byte[],System.Byte[],System.Int16)">
            <summary>
            Add two byte arrays in the given <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
            <param name="value1">The first byte array.</param>
            <param name="value2">The second byte array.</param>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.</param>
            <returns>The sum of the two byte arrays.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.MultiplyBytes(System.Byte[],System.Byte[],System.Int16)">
            <summary>
            Multiply two byte arrays in the given <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
            <param name="value1">The first byte array.</param>
            <param name="value2">The second byte array.</param>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.</param>
            <returns>The product of the two byte arrays.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.op_Addition(Upsilon.Common.Library.YBigInteger,Upsilon.Common.Library.YBigInteger)">
            <summary>
            Add two <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.
            </summary>
            <param name="value1">The first <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.</param>
            <param name="value2">The second <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> which is the sum of the two params</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.op_Addition(Upsilon.Common.Library.YBigInteger,System.Int64)">
            <summary>
            Add a <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> to a <c>long</c> number.
            </summary>
            <param name="value1">The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> number.</param>
            <param name="value2">The <c>long</c> number.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> which is the sum of the two params</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.op_Addition(System.Int64,Upsilon.Common.Library.YBigInteger)">
            <summary>
            Add a <c>long</c> number to a <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.
            </summary>
            <param name="value1">The <c>long</c> number.</param>
            <param name="value2">The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> number.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> which is the sum of the two params</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.op_Multiply(Upsilon.Common.Library.YBigInteger,Upsilon.Common.Library.YBigInteger)">
            <summary>
            Multiply two <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.
            </summary>
            <param name="value1">The first <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.</param>
            <param name="value2">The second <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> which is the product of the two params</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.op_Multiply(Upsilon.Common.Library.YBigInteger,System.Int64)">
            <summary>
            Multiply a <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> to a <c>long</c> number.
            </summary>
            <param name="value1">The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> number.</param>
            <param name="value2">The <c>long</c> number.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> which is the product of the two params</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.op_Multiply(System.Int64,Upsilon.Common.Library.YBigInteger)">
            <summary>
            Multiply a <c>long</c> number to a <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.
            </summary>
            <param name="value1">The <c>long</c> number.</param>
            <param name="value2">The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> number.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> which is the product of the two params</returns>
        </member>
    </members>
</doc>
