<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Upsilon.Common.Library</name>
    </assembly>
    <members>
        <member name="T:Upsilon.Common.Library.YArgumentParser">
            <summary>
            The Upsilon Ecosystem argument parsing engine.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgumentParser.Arguments">
            <summary>
            Get the list of <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> parsed by the engine.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgumentParser.Args">
            <summary>
            Get the raw arguments given to the engine.
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YArgumentParser.ArgModifiers">
            <summary>
            Get the list of argument modifiers :
            <list type="bullet">
            <item><description>the dash '-'</description></item>
            <item><description>the slash '/'</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.#ctor(System.String[])">
            <summary>
            Create a new argument parser engine from an argument list.
            <example>
            <code>
               YArgumentParser argumentParser = new YArgumentParser(new string[]
                   { 
                       "First value of the main argument",
                       "Second value of the main argument",
                       "-s",
                       "source",
                       "/d",
                       "destination",
                       "-readonly"
                   });
            </code>
            In results, <c>argumentParser</c> will have 4 arguments : 
            <list type="bullet">
            <item><description>the main argument which has 2 values</description></item>
            <item><description><c>s</c> argument which has <c>source</c> as value</description></item>
            <item><description><c>d</c> argument which has <c>destination</c> as value</description></item>
            <item><description><c>readonly</c> argument which is set as boolean</description></item>
            </list>
            </example>
            </summary>
            <param name="args">The arguments list</param>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.GetArgument(System.String)">
            <summary>
            Get a <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> from the <paramref name="argName"/> or <c>null</c> if the given param is not found.
            <example>
            <code>
               YArgumentParser argumentParser = new YArgumentParser(new string[]
                   { 
                       "First value of the main argument",
                       "Second value of the main argument",
                       "-s",
                       "source",
                       "/d",
                       "destination",
                       "-readonly"
                   });
               YArgument argument = argumentParser.GetArgument("s");
               YArgument mainArgument = argumentParser.GetArgument(string.Empty);
               YArgument nullArgument = argumentParser.GetArgument("m");
            </code>
            In results :
            <list type="bullet">
                <item><description><c>argument.Values</c> will be <c>{ "source" }</c></description></item>
                <item><description><c>mainArgument.Values</c> will be <c>{ "First value of the main argument", "Second value of the main argument"}</c></description></item>
                <item><description><c>nullArgument</c> will be <c>null</c></description></item>
            </list>
            </example>
            </summary>
            <remarks>Giving string.Empty to the <paramref name="argName"/> param will return the main <c>YArguments</c></remarks>
            <param name="argName"></param>
            <returns>Returns the <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> or <c>null</c></returns>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.HasArgument(System.String)">
            <summary>
            Check if the <paramref name="argName"/> is set.
            <example>
            <code>
               YArgumentParser argumentParser = new YArgumentParser(new string[]
                   { 
                       "First value of the main argument",
                       "Second value of the main argument",
                       "-s",
                       "source",
                       "/d",
                       "destination",
                       "-readonly"
                   });
            </code>
            In results :
            <list type="bullet">
                <item><description><c>argumentParser.HasArgument(string.Empty)</c> will return <c>true</c> because it has main argument</description></item>
                <item><description><c>argumentParser.HasArgument("s")</c> will return <c>true</c></description></item>
                <item><description><c>argumentParser.HasArgument("readonly")</c> will return <c>true</c></description></item>
                <item><description><c>argumentParser.HasArgument("m")</c> will return <c>false</c></description></item>
            </list>
            </example>
            </summary>
            <param name="argName"></param>
            <returns>Returns <c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.ArgumentIsSet(System.String)">
            <summary>
            Check if the <paramref name="argName"/> is set as a boolean.
            <example>
            <code>
               YArgumentParser argumentParser = new YArgumentParser(new string[]
                   { 
                       "First value of the main argument",
                       "Second value of the main argument",
                       "-s",
                       "source",
                       "/d",
                       "destination",
                       "-readonly"
                   });
            </code>
            In results :
            <list type="bullet">
                <item><description><c>argumentParser.ArgumentIsSet(string.Empty)</c> will return <c>false</c> because the main argument cannot be set as boolean</description></item>
                <item><description><c>argumentParser.ArgumentIsSet("s")</c> will return <c>false</c> because this argument is not set as boolean</description></item>
                <item><description><c>argumentParser.ArgumentIsSet("readonly")</c> will return <c>true</c></description></item>
                <item><description><c>argumentParser.ArgumentIsSet("override")</c> will return <c>false</c></description></item>
            </list>
            </example>
            </summary>
            <param name="argName"></param>
            <returns>Returns <c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.GetMainArgument">
            <summary>
            Get the main <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> or <c>null</c> if not found.
            </summary>
            <returns>Returns the <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> or <c>null</c></returns>
        </member>
        <member name="T:Upsilon.Common.Library.YArgument">
            <summary>
            This class represent an argument parsed by a <c><see cref="T:Upsilon.Common.Library.YArgumentParser"/></c>.
            <seealso cref="T:Upsilon.Common.Library.YArgumentParser"/>
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgument.Name">
            <summary>
            The name of the argument without its modifier.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgument.Values">
            <summary>
            The values of the argument.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgument.IsBoolean">
            <summary>
            Check if the argument is set as a boolean.
            </summary>
        </member>
        <member name="T:Upsilon.Common.Library.YBase">
            <summary>
            Enumerate numeric bases
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.None">
            <summary>
            Unknown base
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.Binary">
            <summary>
            Binary base (2)
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.Octal">
            <summary>
            Octal base (8)
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.Decimal">
            <summary>
            Decimal base (10)
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.Hexadecimal">
            <summary>
            Hexadecimal base (16)
            </summary>
        </member>
    </members>
</doc>
