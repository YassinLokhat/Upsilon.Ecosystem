<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Upsilon.Common.Library</name>
    </assembly>
    <members>
        <member name="T:Upsilon.Common.Library.YArgumentParser">
            <summary>
            The Upsilon Ecosystem argument parsing engine.
            <seealso cref="T:Upsilon.Common.Library.YArgument"/>
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgumentParser.Arguments">
            <summary>
            Get the list of <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> parsed by the engine.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgumentParser.Args">
            <summary>
            Get the raw arguments given to the engine.
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YArgumentParser.ArgModifiers">
            <summary>
            Get the list of argument modifiers :
            <list type="bullet">
            <item><description>the dash '-'</description></item>
            <item><description>the slash '/'</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.#ctor(System.String[])">
            <summary>
            Create a new argument parser engine from an argument list.
            <example>
            <code>
               YArgumentParser argumentParser = new YArgumentParser(new string[]
                   { 
                       "First value of the main argument",
                       "Second value of the main argument",
                       "-s",
                       "source",
                       "/d",
                       "destination",
                       "-readonly"
                   });
            </code>
            In results, <c>argumentParser</c> will have 4 arguments : 
            <list type="bullet">
            <item><description>the main argument which has 2 values</description></item>
            <item><description><c>s</c> argument which has <c>source</c> as value</description></item>
            <item><description><c>d</c> argument which has <c>destination</c> as value</description></item>
            <item><description><c>readonly</c> argument which is set as boolean</description></item>
            </list>
            </example>
            </summary>
            <param name="args">The arguments list</param>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.GetArgument(System.String)">
            <summary>
            Get a <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> from the <paramref name="argName"/> or <c>null</c> if the given param is not found.
            <example>
            <code>
               YArgumentParser argumentParser = new YArgumentParser(new string[]
                   { 
                       "First value of the main argument",
                       "Second value of the main argument",
                       "-s",
                       "source",
                       "/d",
                       "destination",
                       "-readonly"
                   });
               YArgument argument = argumentParser.GetArgument("s");
               YArgument mainArgument = argumentParser.GetArgument(string.Empty);
               YArgument nullArgument = argumentParser.GetArgument("m");
            </code>
            In results :
            <list type="bullet">
                <item><description><c>argument.Values</c> will be <c>{ "source" }</c></description></item>
                <item><description><c>mainArgument.Values</c> will be <c>{ "First value of the main argument", "Second value of the main argument"}</c></description></item>
                <item><description><c>nullArgument</c> will be <c>null</c></description></item>
            </list>
            </example>
            </summary>
            <remarks>Giving string.Empty to the <paramref name="argName"/> param will return the main <c>YArguments</c></remarks>
            <param name="argName"></param>
            <returns>Returns the <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> or <c>null</c></returns>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.HasArgument(System.String)">
            <summary>
            Check if the <paramref name="argName"/> is set.
            <example>
            <code>
               YArgumentParser argumentParser = new YArgumentParser(new string[]
                   { 
                       "First value of the main argument",
                       "Second value of the main argument",
                       "-s",
                       "source",
                       "/d",
                       "destination",
                       "-readonly"
                   });
            </code>
            In results :
            <list type="bullet">
                <item><description><c>argumentParser.HasArgument(string.Empty)</c> will return <c>true</c> because it has main argument</description></item>
                <item><description><c>argumentParser.HasArgument("s")</c> will return <c>true</c></description></item>
                <item><description><c>argumentParser.HasArgument("readonly")</c> will return <c>true</c></description></item>
                <item><description><c>argumentParser.HasArgument("m")</c> will return <c>false</c></description></item>
            </list>
            </example>
            </summary>
            <param name="argName"></param>
            <returns>Returns <c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.ArgumentIsSet(System.String)">
            <summary>
            Check if the <paramref name="argName"/> is set as a boolean.
            <example>
            <code>
               YArgumentParser argumentParser = new YArgumentParser(new string[]
                   { 
                       "First value of the main argument",
                       "Second value of the main argument",
                       "-s",
                       "source",
                       "/d",
                       "destination",
                       "-readonly"
                   });
            </code>
            In results :
            <list type="bullet">
                <item><description><c>argumentParser.ArgumentIsSet(string.Empty)</c> will return <c>false</c> because the main argument cannot be set as boolean</description></item>
                <item><description><c>argumentParser.ArgumentIsSet("s")</c> will return <c>false</c> because this argument is not set as boolean</description></item>
                <item><description><c>argumentParser.ArgumentIsSet("readonly")</c> will return <c>true</c></description></item>
                <item><description><c>argumentParser.ArgumentIsSet("override")</c> will return <c>false</c></description></item>
            </list>
            </example>
            </summary>
            <param name="argName"></param>
            <returns>Returns <c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Upsilon.Common.Library.YArgumentParser.GetMainArgument">
            <summary>
            Get the main <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> or <c>null</c> if not found.
            </summary>
            <returns>Returns the <c><see cref="T:Upsilon.Common.Library.YArgument"/></c> or <c>null</c></returns>
        </member>
        <member name="T:Upsilon.Common.Library.YArgument">
            <summary>
            This class represents an argument parsed by a <c><see cref="T:Upsilon.Common.Library.YArgumentParser"/></c>.
            <seealso cref="T:Upsilon.Common.Library.YArgumentParser"/>
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgument.Name">
            <summary>
            The name of the argument without its modifier.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgument.Values">
            <summary>
            The values of the argument.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YArgument.IsBoolean">
            <summary>
            Check if the argument is set as a boolean.
            </summary>
        </member>
        <member name="T:Upsilon.Common.Library.YBinaryType">
            <summary>
            All types of binaries.
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBinaryType.ClassLibrary">
            <summary>
            The assembly is a dll class library.
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBinaryType.WindowApplication">
            <summary>
            The assembly is a window application.
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBinaryType.ConsoleApplication">
            <summary>
            The assembly is a console application.
            </summary>
        </member>
        <member name="T:Upsilon.Common.Library.YAssembly">
            <summary>
            This class represents an assembly.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YAssembly.Name">
            <summary>
            The name of the assembly.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YAssembly.Version">
            <summary>
            The version of the assembly.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YAssembly.Description">
            <summary>
            The description of the assembly.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YAssembly.BinaryType">
            <summary>
            The type of binary of the assembly.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YAssembly.Url">
            <summary>
            The url to the assembly.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YAssembly.Depreciated">
            <summary>
            Get or Set if the assembly is depreciated.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YAssembly.Dependencies">
            <summary>
            The assembly's dependencies.
            <seealso cref="T:Upsilon.Common.Library.YDependency"/>
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YAssembly.YVersion">
            <summary>
            Get the assembly's version as a <c><see cref="P:Upsilon.Common.Library.YAssembly.YVersion"/></c>.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YAssembly.DownloadDependecies(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Upsilon.Common.Library.YAssembly}},System.String,System.Collections.Generic.List{Upsilon.Common.Library.YAssembly})">
            <summary>
            Download all dependecies of the current assembly.
            </summary>
            <param name="deployedAssemblies">The list of dependencies on the server.</param>
            <param name="outputPath">The path where the dependecies will be downloaded.</param>
            <param name="downloadedDependencies">The list of dependecies already downloaded. By default this parameter is <c>null</c>.</param>
        </member>
        <member name="M:Upsilon.Common.Library.YAssembly.DownloadAssembly(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Upsilon.Common.Library.YAssembly}},System.String)">
            <summary>
            Download the assembly with its all dependencies.
            </summary>
            <param name="deployedAssemblies">The list of dependencies on the server.</param>
            <param name="outputPath">The path where the dependecies will be downloaded.</param>
        </member>
        <member name="T:Upsilon.Common.Library.YDependency">
            <summary>
            This class represents an assembly used by another assembly.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YDependency.Name">
            <summary>
            The name of the assembly.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YDependency.MinimalVersion">
            <summary>
            The minimal version needed by the using assembly.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YDependency.MaximalVersion">
            <summary>
            The maximal version needed by the using assembly.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YDependency.YMinimalVersion">
            <summary>
            Get the minimal version needed by the using assembly as a <c><see cref="T:Upsilon.Common.Library.YVersion"/></c>.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YDependency.YMaximalVersion">
            <summary>
            Get the maximal version needed by the using assembly as a <c><see cref="T:Upsilon.Common.Library.YVersion"/></c>.
            </summary>
        </member>
        <member name="T:Upsilon.Common.Library.YBase">
            <summary>
            Enumerate numeric bases
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.None">
            <summary>
            Unknown base
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.Binary">
            <summary>
            Binary base (2)
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.Octal">
            <summary>
            Octal base (8)
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.Decimal">
            <summary>
            Decimal base (10)
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YBase.Hexadecimal">
            <summary>
            Hexadecimal base (16)
            </summary>
        </member>
        <member name="T:Upsilon.Common.Library.YBaseExtensions">
            <summary>
            Extension methods class for <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YBaseExtensions.GetBaseNumber(Upsilon.Common.Library.YBase)">
            <summary>
            Returns the base number of the given <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> to return the number.</param>
            <returns>
            The base number : 
            <list type="bullet">
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.None</c> : 0</description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Binary</c> : 2</description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Octal</c> : 8</description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Decimal</c> : 10</description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Hexadecimal</c> : 16</description></item>
            </list>
            </returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBaseExtensions.GetAlphabet(Upsilon.Common.Library.YBase)">
            <summary>
            Returns the alphabet of the given <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> to return the alphabet.</param>
            <returns>
            The alphabet : 
            <list type="bullet">
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.None</c> : <c>string.Empty</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Binary</c> : <c>"01"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Octal</c> : <c>"01234567"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Decimal</c> : <c>"0123456789"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Hexadecimal</c> : <c>"0123456789ABCDEF"</c></description></item>
            </list>
            </returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBaseExtensions.GetPrefix(Upsilon.Common.Library.YBase)">
            <summary>
            Returns the prefix of the given <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> to return the prefix.</param>
            <returns>
            The prefix : 
            <list type="bullet">
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.None</c> : <c>string.Empty</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Binary</c> : <c>"0b"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Octal</c> : <c>"0o"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Decimal</c> : <c>"0d"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Hexadecimal</c> : <c>"0x"</c></description></item>
            </list>
            </returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBaseExtensions.GetDigitGroup(Upsilon.Common.Library.YBase)">
            <summary>
            Returns the digit group of the given <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> to return the digit group.</param>
            <returns>
            The digit group : 
            <list type="bullet">
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.None</c> : <c>0</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Binary</c> : <c>"8"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Octal</c> : <c>"2"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Decimal</c> : <c>"1"</c></description></item>
            <item><description>For <c><see cref="T:Upsilon.Common.Library.YBase"/>.Hexadecimal</c> : <c>"2"</c></description></item>
            </list>
            </returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBaseExtensions.GetBases">
            <summary>
            Returns all values of the <c><see cref="T:Upsilon.Common.Library.YBase"/></c> enum.
            </summary>
            <returns>All values of the <c><see cref="T:Upsilon.Common.Library.YBase"/></c> enum</returns>
        </member>
        <member name="T:Upsilon.Common.Library.YBigInteger">
            <summary>
            This class represents a big integer.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YBigInteger.ByteArray">
            <summary>
            The byte array which represent the <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.#ctor(System.Byte[])">
            <summary>
            Create a new <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> from the byte array <c><paramref name="byteArray"/></c>.
            </summary>
            <param name="byteArray">The byte array.</param>
        </member>
        <member name="F:Upsilon.Common.Library.YBigInteger.InternalBase">
            <summary>
            The internal base which is 0x100 or 256.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.#ctor(System.String)">
            <summary>
            Create a new <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> from the <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string number <c><paramref name="strValue"/></c>.
            </summary>
            <param name="strValue">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string number</param>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.ToString">
            <summary>
            Returns the <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> in <c><see cref="F:Upsilon.Common.Library.YBase.Decimal"/></c> string format.
            </summary>
            <returns>The <c><see cref="F:Upsilon.Common.Library.YBase.Decimal"/></c> string format.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.ToString(Upsilon.Common.Library.YBase)">
            <summary>
            Returns the <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> in the <c><paramref name="base"/></c> prefixed string format.
            </summary>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.</param>
            <returns>The <c><paramref name="base"/></c> prefixed string format.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.AddString(System.String,System.String)">
            <summary>
            Add two <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string.
            </summary>
            <remarks>The two <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string should be in the same base.</remarks>
            <exception cref="T:System.Exception">Occurs when one of the string are not valide or if the two strings are not in the same base.</exception>
            <param name="strValue1">The first <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string.</param>
            <param name="strValue2">The second <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string which is the sum of the two strings</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.MultiplyString(System.String,System.String)">
            <summary>
            Multiply two <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string.
            </summary>
            <remarks>The two <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string should be in the same base.</remarks>
            <exception cref="T:System.Exception">Occurs when one of the string are not valide or if the two strings are not in the same base.</exception>
            <param name="strValue1">The first <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string.</param>
            <param name="strValue2">The second <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBase"/></c> prefixed string which is the product of the two strings.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.AddBytes(System.Byte[],System.Byte[],System.Int16)">
            <summary>
            Add two byte arrays in the given <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
            <param name="value1">The first byte array.</param>
            <param name="value2">The second byte array.</param>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.</param>
            <returns>The sum of the two byte arrays.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.MultiplyBytes(System.Byte[],System.Byte[],System.Int16)">
            <summary>
            Multiply two byte arrays in the given <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.
            </summary>
            <param name="value1">The first byte array.</param>
            <param name="value2">The second byte array.</param>
            <param name="base">The <c><see cref="T:Upsilon.Common.Library.YBase"/></c>.</param>
            <returns>The product of the two byte arrays.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.op_Addition(Upsilon.Common.Library.YBigInteger,Upsilon.Common.Library.YBigInteger)">
            <summary>
            Add two <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.
            </summary>
            <param name="value1">The first <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.</param>
            <param name="value2">The second <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> which is the sum of the two params</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.op_Addition(Upsilon.Common.Library.YBigInteger,System.Int64)">
            <summary>
            Add a <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> to a <c>long</c> number.
            </summary>
            <param name="value1">The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> number.</param>
            <param name="value2">The <c>long</c> number.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> which is the sum of the two params</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.op_Addition(System.Int64,Upsilon.Common.Library.YBigInteger)">
            <summary>
            Add a <c>long</c> number to a <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.
            </summary>
            <param name="value1">The <c>long</c> number.</param>
            <param name="value2">The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> number.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> which is the sum of the two params</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.op_Multiply(Upsilon.Common.Library.YBigInteger,Upsilon.Common.Library.YBigInteger)">
            <summary>
            Multiply two <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.
            </summary>
            <param name="value1">The first <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.</param>
            <param name="value2">The second <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> which is the product of the two params</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.op_Multiply(Upsilon.Common.Library.YBigInteger,System.Int64)">
            <summary>
            Multiply a <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> to a <c>long</c> number.
            </summary>
            <param name="value1">The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> number.</param>
            <param name="value2">The <c>long</c> number.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> which is the product of the two params</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YBigInteger.op_Multiply(System.Int64,Upsilon.Common.Library.YBigInteger)">
            <summary>
            Multiply a <c>long</c> number to a <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c>.
            </summary>
            <param name="value1">The <c>long</c> number.</param>
            <param name="value2">The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> number.</param>
            <returns>The <c><see cref="T:Upsilon.Common.Library.YBigInteger"/></c> which is the product of the two params</returns>
        </member>
        <member name="T:Upsilon.Common.Library.YConfigurationProvider`1">
            <summary>
            Represents a Configuration provider on the given enum.
            </summary>
            <typeparam name="T">The enum type of the configuration file. Each element of the enum will have its own configuration object.</typeparam>
        </member>
        <member name="P:Upsilon.Common.Library.YConfigurationProvider`1.ConfigurationFile">
            <summary>
            The configuration file path.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YConfigurationProvider`1.#ctor(System.String,System.String)">
            <summary>
            Create a new configuration provider from the given <paramref name="configurationFile"/>.
            </summary>
            <param name="configurationFile">The configuration file paht. If it does not exist, it will be created.</param>
            <param name="key">The encryption key. Leave empty to disable encryption. The default value is <see cref="F:System.String.Empty"/>.</param>
        </member>
        <member name="M:Upsilon.Common.Library.YConfigurationProvider`1.SetConfiguration(`0,System.Object)">
            <summary>
            Set the configuration value of the given configuration key.
            </summary>
            <param name="configurationKey">The configuration key.</param>
            <param name="configurationValue">The configuration value.</param>
        </member>
        <member name="M:Upsilon.Common.Library.YConfigurationProvider`1.GetConfiguration``1(`0)">
            <summary>
            Get the configuration value of the given configuration key.
            </summary>
            <typeparam name="U">The type of the configuration value.</typeparam>
            <param name="configurationKey">The configuration key.</param>
            <returns>The configuration value or the default value of <typeparamref name="U"/> if the given <paramref name="configurationKey"/> is missing.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YConfigurationProvider`1.HasConfiguration(`0)">
            <summary>
            Check if the given configuration key has a value.
            </summary>
            <param name="configurationKey">The configuration key.</param>
            <returns><c>true</c> or <c>false</c>.</returns>
        </member>
        <member name="T:Upsilon.Common.Library.YCryptography">
            <summary>
            This static class contains the Cryptographic functions.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YCryptography.Cipher_Aes(System.String,System.String)">
            <summary>
            Cipher the <c><paramref name="plainText"/></c> string using the <c><paramref name="key"/></c>.
            </summary>
            <param name="plainText">The plain text to cipher.</param>
            <param name="key">The password key.</param>
            <returns></returns>
        </member>
        <member name="M:Upsilon.Common.Library.YCryptography.Uncipher_Aes(System.String,System.String)">
            <summary>
            Uncipher the <c><paramref name="cipherText"/></c> string using the <c><paramref name="key"/></c>.
            </summary>
            <param name="cipherText">The cither text to uncipher.</param>
            <param name="key">The password key.</param>
            <returns></returns>
        </member>
        <member name="T:Upsilon.Common.Library.YStaticMethods">
            <summary>
            This static class contains some static methods and extention methods.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.Contains(System.Xml.XmlAttributeCollection,System.String)">
            <summary>
            Check if a <c><see cref="T:System.Xml.XmlAttributeCollection"/> <paramref name="Attributes"/></c> contains an attribute named as the <c><paramref name="attribute"/></c>.
            </summary>
            <param name="Attributes">The <see cref="T:System.Xml.XmlAttributeCollection"/>.</param>
            <param name="attribute">The name of the attribute to check.</param>
            <returns>Return <c>true</c> or <c>false</c>.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.IsNullOrWhiteSpace(System.Xml.XmlAttributeCollection,System.String)">
            <summary>
            Check if a <c><see cref="T:System.Xml.XmlAttributeCollection"/> <paramref name="Attributes"/></c> contains an attribute named as the <c><paramref name="attribute"/></c> and its value is not null or empty.
            </summary>
            <param name="Attributes">The <see cref="T:System.Xml.XmlAttributeCollection"/>.</param>
            <param name="attribute">The name of the attribute to check.</param>
            <returns>Return <c>true</c> or <c>false</c>.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.GetMD5HashCode(System.Object)">
            <summary>
            Get the MD5 Hash code of an <c><see cref="T:System.Object"/> <paramref name="obj"/></c> as a string.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/>.</param>
            <returns>Return the MD5 Hash code.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.GetUpsilonHashCode(System.Object)">
            <summary>
            Get the Upsilon Hash code of an <c><see cref="T:System.Object"/> <paramref name="obj"/></c> as a string.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/>.</param>
            <returns>Return the Upsilon Hash code.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.Clone``1(``0)">
            <summary>
            Clone a object.
            </summary>
            <typeparam name="T">The type of the object to clone.</typeparam>
            <param name="obj">The object to clone.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.IsEnumFlagPresent``1(``0,``0)">
            <summary>
            Check if the <c><typeparamref name="T"/>.<paramref name="lookingForFlag"/></c> is set in the <c><typeparamref name="T"/>.<paramref name="value"/></c> enumeration flag.
            </summary>
            <typeparam name="T">An enum type.</typeparam>
            <param name="value">The enum value.</param>
            <param name="lookingForFlag">The flag value to look at.</param>
            <returns>Return <c>true</c> or <c>false</c>.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.GetEnumValues``1">
            <summary>
            Get all values of the <c><typeparamref name="T"/></c> enum type.
            </summary>
            <typeparam name="T">An enum type.</typeparam>
            <returns>Returns all values of the givent enum.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.SerializeObject(System.Object,System.Boolean)">
            <summary>
            Serialize an <c><see cref="T:System.Object"/> <paramref name="toSerialize"/></c>.
            </summary>
            <param name="toSerialize">The object to serialize.</param>
            <param name="indent">Indent the result or not. Default value is <c>false</c>.</param>
            <returns>The serialized string.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserialize an <c><paramref name="toDeserialize"/></c> string to a <c><paramref name="type"/></c> type.
            </summary>
            <param name="toDeserialize">The string to deserialize.</param>
            <param name="type">The type of the object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.DeserializeObject``1(System.String)">
            <summary>
            Deserialize an <c><paramref name="toDeserialize"/></c> string to a <c><typeparamref name="T"/></c> type.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="toDeserialize">The string to deserialize.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.ProcessStartUrl(System.String)">
            <summary>
            Replacing the method <c><see cref="T:System.Diagnostics.Process"/>.<see cref="M:System.Diagnostics.Process.Start"/></c> since it will not run for urls on .Net 5.0 framework.
            </summary>
            <param name="url">The Url to open.</param>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.DownloadString(System.String)">
            <summary>
            Download a string from the given URL.
            </summary>
            <param name="url">The URL of the string to download.</param>
            <returns>The downloaded string.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.DownloadFile(System.String,System.String)">
            <summary>
            Download a file from the given URL.
            </summary>
            <param name="url">The URL of the file to download.</param>
            <param name="filePath"></param>
            <returns>The downloaded string.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.Copy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copy a file or a directory.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationDirectory">The directory where the copy will be save.</param>
            <param name="override">Override the destination if already exists.</param>
            <param name="throwException">Throw an exception when error occurs.</param>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.Find``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Find an elemen from a listable object.
            </summary>
            <typeparam name="T">The type of object in the list.</typeparam>
            <param name="list">The list of objects.</param>
            <param name="predicate">The search criteria.</param>
            <returns>The object found or <c>null</c>.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStaticMethods.Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Find an elemen from an enumerable object.
            </summary>
            <typeparam name="T">The type of object in the list.</typeparam>
            <param name="list">The list of objects.</param>
            <param name="predicate">The search criteria.</param>
            <returns>The object found or <c>null</c>.</returns>
        </member>
        <member name="T:Upsilon.Common.Library.YStringManagement">
            <summary>
            This static class contains the string management functions.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YStringManagement.IsIdentifiant(System.String)">
            <summary>
            Check if the <c><paramref name="identifiant"/></c> is valid as an identifiant according to the following criterias :
            <list type="bullet">
            <item><description>It cannot be null or empty.</description></item>
            <item><description>It contains only alphanumeric characters and/or underscore character.</description></item>
            <item><description>It does not start with a digit number.</description></item>
            </list>
            </summary>
            <param name="identifiant"></param>
            <returns>Return <c>true</c> or <c>false</c>.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStringManagement.GetNextTextBlock(System.String,Upsilon.Common.Library.YTextBlockSearchConfiguration)">
            <summary>
            Get the next block of text which is bounded by the <c><see cref="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.BlockStart"/></c> and the <c><see cref="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.BlockEnd"/></c> strings.
            </summary>
            <param name="str">The input string.</param>
            <param name="configuration">The <c><see cref="T:Upsilon.Common.Library.YTextBlockSearchConfiguration"/></c> for the search.</param>
            <returns></returns>
        </member>
        <member name="M:Upsilon.Common.Library.YStringManagement.IndexOfPrevious(System.String,System.String,System.Int32)">
            <summary>
            Get the previous index of the given <c><paramref name="value"/></c> string in the <c><paramref name="str"/></c> string from the <c><paramref name="startIndex"/></c> index.
            </summary>
            <param name="str">The string to search in.</param>
            <param name="value">The value to search.</param>
            <param name="startIndex">The start index. Default value is <c>-1</c> and then the search will start at from the end of the <c><paramref name="str"/></c>.</param>
            <returns>Returns the index of the previous occurence of the <c><paramref name="value"/></c> string or <c>-1</c> if not found.</returns>
        </member>
        <member name="T:Upsilon.Common.Library.YTextBlock">
            <summary>
            This class represents a text block.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlock.Configuration">
            <summary>
            The <c><see cref="T:Upsilon.Common.Library.YTextBlockSearchConfiguration"/></c> used for the search.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlock.StartIndex">
            <summary>
            The index of the begining of the block, including the <c><see cref="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.BlockStart"/></c> string.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlock.EndIndex">
            <summary>
            The index of the end of the block, including the <c><see cref="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.BlockEnd"/></c> string.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlock.Text">
            <summary>
            The full text given to the search.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlock.OuterText">
            <summary>
            Get the found text block including the <c><see cref="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.BlockStart"/></c> string and the <c><see cref="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.BlockEnd"/></c> string.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlock.InnerText">
            <summary>
            Get the found text block without the <c><see cref="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.BlockStart"/></c> string and the <c><see cref="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.BlockEnd"/></c> string.
            </summary>
        </member>
        <member name="T:Upsilon.Common.Library.YTextBlockSearchConfiguration">
            <summary>
            Configure the search using <c><see cref="M:Upsilon.Common.Library.YStringManagement.GetNextTextBlock(System.String,Upsilon.Common.Library.YTextBlockSearchConfiguration)"/></c> method.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.BlockStart">
            <summary>
            Indicate the string delimiting the begining of the block.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.BlockEnd">
            <summary>
            Indicate the string delimiting the end of the block.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.InlineIgnore">
            <summary>
            The inline ignore string.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.BlockIgnoreStart">
            <summary>
            The block ignore starting string.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.BlockIgnoreEnd">
            <summary>
            The block ignore ending string.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.Escape">
            <summary>
            The escape string.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTextBlockSearchConfiguration.StartIndex">
            <summary>
            The index where the search will start.
            </summary>
        </member>
        <member name="T:Upsilon.Common.Library.YTranslator">
            <summary>
            <para>A string translation engine.</para>
            <para>Inherits from <c>Dictionary&lt;string, string></c>.</para>
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTranslator.LanguageCode">
            <summary>
            The language code
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YTranslator.LanguageName">
            <summary>
            The language name
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YTranslator.#ctor(System.String,System.String)">
            <summary>
            Create a <c><see cref="T:Upsilon.Common.Library.YTranslator"/></c> from a <c><paramref name="filePath"/></c> file.
            </summary>
            <param name="filePath">The path of the file containing translations.</param>
            <param name="key">The key to uncipher the given file.</param>
        </member>
        <member name="T:Upsilon.Common.Library.YUpdateCentre">
            <summary>
            This static class contains update functions.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YUpdateCentre.CheckForUpdate(System.String,System.String,Upsilon.Common.Library.YAssembly@)">
            <summary>
            <para>Check if an update is available for the given <c><paramref name="assemblyName"/></c> assembly from the <c><paramref name="configUrl"/></c> source.</para>
            <para>In that case, returns that new version as a <c><see cref="T:Upsilon.Common.Library.YVersion"/></c>.</para>
            </summary>
            <remarks>
            <para>The <c><paramref name="configUrl"/></c> source should be deserializable into a <c>List&lt;<see cref="T:Upsilon.Common.Library.YAssembly"/>></c> by using the <c><see cref="T:Upsilon.Common.Library.YStaticMethods"/>.<see cref="M:Upsilon.Common.Library.YStaticMethods.DeserializeObject(System.String,System.Type)"/></c> method.</para>
            <para>Only the following fields are mandataory : <c>Name</c>, <c>Version</c> and <c>Depreciated</c>.</para>
            </remarks>
            <param name="configUrl">The url of the source.</param>
            <param name="assemblyName">The name of the assembly.</param>
            <param name="assembly">The lastest <c><see cref="T:Upsilon.Common.Library.YAssembly"/></c> or <c>null</c> if that assembly is missing in the source.</param>
            <returns>Returns the list of <c><see cref="T:Upsilon.Common.Library.YAssembly"/></c> deployed on the server or <c>null</c>.</returns>
        </member>
        <member name="T:Upsilon.Common.Library.YVersionFormat">
            <summary>
            Enumerate <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> to string format.
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YVersionFormat.Simple">
            <summary>
            <c>X.Yz</c> format where <c>X</c> is the Major, <c>Y</c> is the Minor and <c>z</c> is the Build as a letter.
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YVersionFormat.Extended">
            <summary>
            <c>X.Y.Z</c> format where <c>X</c> is the Major, <c>Y</c> is the Minor and <c>Z</c> is the Build.
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YVersionFormat.Full">
            <summary>
            <c>X.Y.Z.W</c> format where <c>X</c> is the Major, <c>Y</c> is the Minor, <c>Z</c> is the Build and <c>W</c> is the Revision.
            </summary>
        </member>
        <member name="T:Upsilon.Common.Library.YVersion">
            <summary>
            This class represents a version.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YVersion.Major">
            <summary>
            The Major version number.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YVersion.Minor">
            <summary>
            The Minor version number.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YVersion.Build">
            <summary>
            The Build version number.
            </summary>
        </member>
        <member name="P:Upsilon.Common.Library.YVersion.Revision">
            <summary>
            The Revision version number.
            </summary>
        </member>
        <member name="F:Upsilon.Common.Library.YVersion.Alphabet">
            <summary>
            The alphabet used for the <c><see cref="F:Upsilon.Common.Library.YVersionFormat.Simple"/></c> string formating.
            </summary>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.#ctor(System.String)">
            <summary>
            Create a new <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> from the string <c><paramref name="version"/></c>.
            </summary>
            <param name="version">The string formated version.</param>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.#ctor(System.Version)">
            <summary>
            Create a new <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> from the <c><see cref="T:System.Version"/> <paramref name="version"/></c>.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.ToString(Upsilon.Common.Library.YVersionFormat)">
            <summary>
            Get the string format of the <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> according to the given <c><paramref name="format"/></c>.
            </summary>
            <param name="format">The format display.</param>
            <returns>Returns the <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> formated string.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.ToString">
            <summary>
            Get the string format of the <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> according to the <c><see cref="F:Upsilon.Common.Library.YVersionFormat.Full"/></c> format.
            </summary>
            <returns>Returns the <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> string in the <c><see cref="F:Upsilon.Common.Library.YVersionFormat.Full"/></c> format.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.op_LessThan(Upsilon.Common.Library.YVersion,Upsilon.Common.Library.YVersion)">
            <summary>
            Check if <c><paramref name="version1"/></c> is lower than <c><paramref name="version2"/></c>.
            </summary>
            <param name="version1">The first version to compare.</param>
            <param name="version2">The second version to compare.</param>
            <returns>Returns <c>true</c> or <c>false</c>.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.op_GreaterThan(Upsilon.Common.Library.YVersion,Upsilon.Common.Library.YVersion)">
            <summary>
            Check if <c><paramref name="version1"/></c> is greater than <c><paramref name="version2"/></c>.
            </summary>
            <param name="version1">The first version to compare.</param>
            <param name="version2">The second version to compare.</param>
            <returns>Returns <c>true</c> or <c>false</c>.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.op_Equality(Upsilon.Common.Library.YVersion,Upsilon.Common.Library.YVersion)">
            <summary>
            Check if <c><paramref name="version1"/></c> is equal to <c><paramref name="version2"/></c>.
            </summary>
            <param name="version1">The first version to compare.</param>
            <param name="version2">The second version to compare.</param>
            <returns>Returns <c>true</c> or <c>false</c>.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.op_Inequality(Upsilon.Common.Library.YVersion,Upsilon.Common.Library.YVersion)">
            <summary>
            Check if <c><paramref name="version1"/></c> is not equal to than <c><paramref name="version2"/></c>.
            </summary>
            <param name="version1">The first version to compare.</param>
            <param name="version2">The second version to compare.</param>
            <returns>Returns <c>true</c> or <c>false</c>.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.op_LessThanOrEqual(Upsilon.Common.Library.YVersion,Upsilon.Common.Library.YVersion)">
            <summary>
            Check if <c><paramref name="version1"/></c> is lower or equal than <c><paramref name="version2"/></c>.
            </summary>
            <param name="version1">The first version to compare.</param>
            <param name="version2">The second version to compare.</param>
            <returns>Returns <c>true</c> or <c>false</c>.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.op_GreaterThanOrEqual(Upsilon.Common.Library.YVersion,Upsilon.Common.Library.YVersion)">
            <summary>
            Check if <c><paramref name="version1"/></c> is greater or equal than <c><paramref name="version2"/></c>.
            </summary>
            <param name="version1">The first version to compare.</param>
            <param name="version2">The second version to compare.</param>
            <returns>Returns <c>true</c> or <c>false</c>.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.Equals(System.Object)">
            <summary>
            Check if the current <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> equals to <c><paramref name="obj"/></c>.
            </summary>
            <remarks>If <c><paramref name="obj"/></c> is not a <c><see cref="T:Upsilon.Common.Library.YVersion"/></c>, this will return <c>false</c>.</remarks>
            <param name="obj">The version to compare with.</param>
            <returns>Returns <c>true</c> or <c>false</c>.</returns>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.Comparison(Upsilon.Common.Library.YVersion,Upsilon.Common.Library.YVersion)">
            <summary>
            Compare two <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> and returns the diference between them.
            </summary>
            <param name="version1">The first version to compare.</param>
            <param name="version2">The second version to compare.</param>
            <returns>
            <para>Returns <c>1</c> if <c><paramref name="version1"/></c> is greater than <c><paramref name="version2"/></c>,</para>
            <para><c>-1</c> if <c><paramref name="version1"/></c> is lower than <c><paramref name="version2"/></c>,</para>
            <para><c>0</c> if <c><paramref name="version1"/></c> is equal to <c><paramref name="version2"/></c>.</para>
            </returns>
        </member>
        <member name="M:Upsilon.Common.Library.YVersion.CompareTo(System.Object)">
            <summary>
            Compare the current <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> to <c><paramref name="obj"/></c> and returns the diference between them.
            </summary>
            <exception cref="T:System.Exception">If <c><paramref name="obj"/></c> is not a <c><see cref="T:Upsilon.Common.Library.YVersion"/></c>, an exception will be thrown.</exception>
            <param name="obj">The first version to compare.</param>
            <returns>
            <para>Returns <c>1</c> if the current <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> is greater than <c><paramref name="obj"/></c>,</para>
            <para><c>-1</c> if the current <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> is lower than <c><paramref name="obj"/></c>,</para>
            <para><c>0</c> if the current <c><see cref="T:Upsilon.Common.Library.YVersion"/></c> is equal to <c><paramref name="obj"/></c>.</para>
            </returns>
        </member>
    </members>
</doc>
